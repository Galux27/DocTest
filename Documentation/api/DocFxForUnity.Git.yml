### YamlMime:ManagedReference
items:
- uid: DocFxForUnity.Git
  commentId: T:DocFxForUnity.Git
  id: Git
  parent: DocFxForUnity
  children:
  - DocFxForUnity.Git.GetSyncRepository(System.String,System.String,System.String)
  - DocFxForUnity.Git.GetTags(Repository)
  langs:
  - csharp
  - vb
  name: Git
  nameWithType: Git
  fullName: DocFxForUnity.Git
  type: Class
  source:
    id: Git
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Git.cs
    startLine: 8
  assemblies:
  - Generate
  namespace: DocFxForUnity
  syntax:
    content: 'public sealed class Git : object'
    content.vb: >-
      Public NotInheritable Class Git

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: DocFxForUnity.Git.GetSyncRepository(System.String,System.String,System.String)
  commentId: M:DocFxForUnity.Git.GetSyncRepository(System.String,System.String,System.String)
  id: GetSyncRepository(System.String,System.String,System.String)
  parent: DocFxForUnity.Git
  langs:
  - csharp
  - vb
  name: GetSyncRepository(String, String, String)
  nameWithType: Git.GetSyncRepository(String, String, String)
  fullName: DocFxForUnity.Git.GetSyncRepository(System.String, System.String, System.String)
  type: Method
  source:
    id: GetSyncRepository
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Git.cs
    startLine: 18
  assemblies:
  - Generate
  namespace: DocFxForUnity
  summary: "\nFetches changes and hard resets the specified repository to the latest commit of a specified branch. If no\nrepository is found, it will be cloned before.\n"
  example: []
  syntax:
    content: public static Repository GetSyncRepository(string sourceUrl, string path, string branch = "master")
    parameters:
    - id: sourceUrl
      type: System.String
      description: The url of the repository.
    - id: path
      type: System.String
      description: The directory path where to find/clone the repository.
    - id: branch
      type: System.String
      description: The branch use on the repository.
    return:
      type: Global.Repository
      description: The synced repository on the latest commit of the specified branch.
    content.vb: Public Shared Function GetSyncRepository(sourceUrl As String, path As String, branch As String = "master") As Repository
  overload: DocFxForUnity.Git.GetSyncRepository*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DocFxForUnity.Git.GetTags(Repository)
  commentId: M:DocFxForUnity.Git.GetTags(Repository)
  id: GetTags(Repository)
  parent: DocFxForUnity.Git
  langs:
  - csharp
  - vb
  name: GetTags(Repository)
  nameWithType: Git.GetTags(Repository)
  fullName: DocFxForUnity.Git.GetTags(Repository)
  type: Method
  source:
    id: GetTags
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Git.cs
    startLine: 58
  assemblies:
  - Generate
  namespace: DocFxForUnity
  summary: "\nReturns a collection of the latest tags of a specified repository.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetTags(Repository repository)
    parameters:
    - id: repository
      type: Global.Repository
      description: The repository to use.
    return:
      type: Global.IEnumerable{System.String}
      description: The collection of tags.
    content.vb: Public Shared Function GetTags(repository As Repository) As IEnumerable(Of String)
  overload: DocFxForUnity.Git.GetTags*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DocFxForUnity
  commentId: N:DocFxForUnity
  name: DocFxForUnity
  nameWithType: DocFxForUnity
  fullName: DocFxForUnity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DocFxForUnity.Git.GetSyncRepository*
  commentId: Overload:DocFxForUnity.Git.GetSyncRepository
  name: GetSyncRepository
  nameWithType: Git.GetSyncRepository
  fullName: DocFxForUnity.Git.GetSyncRepository
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Global.Repository
  isExternal: true
  name: Repository
  nameWithType: Repository
  fullName: Repository
- uid: DocFxForUnity.Git.GetTags*
  commentId: Overload:DocFxForUnity.Git.GetTags
  name: GetTags
  nameWithType: Git.GetTags
  fullName: DocFxForUnity.Git.GetTags
- uid: Global.IEnumerable{System.String}
  commentId: '!:Global.IEnumerable{System.String}'
  definition: Global.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.IEnumerable`1
  commentId: '!:Global.IEnumerable`1'
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
