### YamlMime:ManagedReference
items:
- uid: DocFxForUnity.Utils
  commentId: T:DocFxForUnity.Utils
  id: Utils
  parent: DocFxForUnity
  children:
  - DocFxForUnity.Utils.GetSyncRepository(System.String,System.String,System.String)
  - DocFxForUnity.Utils.RunCommand(System.String)
  - DocFxForUnity.Utils.TestUriExists(System.String)
  langs:
  - csharp
  - vb
  name: Utils
  nameWithType: Utils
  fullName: DocFxForUnity.Utils
  type: Class
  source:
    id: Utils
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Utils.cs
    startLine: 9
  assemblies:
  - Generate
  namespace: DocFxForUnity
  syntax:
    content: 'public sealed class Utils : object'
    content.vb: >-
      Public NotInheritable Class Utils

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: DocFxForUnity.Utils.GetSyncRepository(System.String,System.String,System.String)
  commentId: M:DocFxForUnity.Utils.GetSyncRepository(System.String,System.String,System.String)
  id: GetSyncRepository(System.String,System.String,System.String)
  parent: DocFxForUnity.Utils
  langs:
  - csharp
  - vb
  name: GetSyncRepository(String, String, String)
  nameWithType: Utils.GetSyncRepository(String, String, String)
  fullName: DocFxForUnity.Utils.GetSyncRepository(System.String, System.String, System.String)
  type: Method
  source:
    id: GetSyncRepository
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Utils.cs
    startLine: 37
  assemblies:
  - Generate
  namespace: DocFxForUnity
  summary: "\nFetches changes and hard resets the specified repository to the latest commit of a specified branch. If no\nrepository is found, it will be cloned before.\n"
  example: []
  syntax:
    content: public static Repository GetSyncRepository(string sourceUrl, string path, string branch = "master")
    parameters:
    - id: sourceUrl
      type: System.String
      description: The url of the repository.
    - id: path
      type: System.String
      description: The directory path where to find/clone the repository.
    - id: branch
      type: System.String
      description: The branch use on the repository.
    return:
      type: Global.Repository
      description: The synced repository on the latest commit of the specified branch.
    content.vb: Public Shared Function GetSyncRepository(sourceUrl As String, path As String, branch As String = "master") As Repository
  overload: DocFxForUnity.Utils.GetSyncRepository*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DocFxForUnity.Utils.RunCommand(System.String)
  commentId: M:DocFxForUnity.Utils.RunCommand(System.String)
  id: RunCommand(System.String)
  parent: DocFxForUnity.Utils
  langs:
  - csharp
  - vb
  name: RunCommand(String)
  nameWithType: Utils.RunCommand(String)
  fullName: DocFxForUnity.Utils.RunCommand(System.String)
  type: Method
  source:
    id: RunCommand
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Utils.cs
    startLine: 76
  assemblies:
  - Generate
  namespace: DocFxForUnity
  summary: "\nRun a command in a hidden window and returns its output.\n"
  example: []
  syntax:
    content: public static string RunCommand(string command)
    parameters:
    - id: command
      type: System.String
      description: The command to run.
    return:
      type: System.String
      description: The output of the command.
    content.vb: Public Shared Function RunCommand(command As String) As String
  overload: DocFxForUnity.Utils.RunCommand*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DocFxForUnity.Utils.TestUriExists(System.String)
  commentId: M:DocFxForUnity.Utils.TestUriExists(System.String)
  id: TestUriExists(System.String)
  parent: DocFxForUnity.Utils
  langs:
  - csharp
  - vb
  name: TestUriExists(String)
  nameWithType: Utils.TestUriExists(String)
  fullName: DocFxForUnity.Utils.TestUriExists(System.String)
  type: Method
  source:
    id: TestUriExists
    path: C:\UnityProjects\DocumentationGenTest\UnityXrefMaps\Utils.cs
    startLine: 106
  assemblies:
  - Generate
  namespace: DocFxForUnity
  summary: "\nRequests the specified URI with <xref href=\"DocFxForUnity.Utils.httpClient\" data-throw-if-not-resolved=\"false\"></xref> and returns if the response status code is in the\nrange 200-299.\n"
  example: []
  syntax:
    content: public static Task<bool> TestUriExists(string uri)
    parameters:
    - id: uri
      type: System.String
      description: The URI to request.
    return:
      type: Global.Task{System.Boolean}
      description: <code>true</code> if the response status code is in the range 200-299.
    content.vb: Public Shared Function TestUriExists(uri As String) As Task(Of Boolean)
  overload: DocFxForUnity.Utils.TestUriExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DocFxForUnity
  commentId: N:DocFxForUnity
  name: DocFxForUnity
  nameWithType: DocFxForUnity
  fullName: DocFxForUnity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DocFxForUnity.Utils.GetSyncRepository*
  commentId: Overload:DocFxForUnity.Utils.GetSyncRepository
  name: GetSyncRepository
  nameWithType: Utils.GetSyncRepository
  fullName: DocFxForUnity.Utils.GetSyncRepository
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Global.Repository
  isExternal: true
  name: Repository
  nameWithType: Repository
  fullName: Repository
- uid: DocFxForUnity.Utils.RunCommand*
  commentId: Overload:DocFxForUnity.Utils.RunCommand
  name: RunCommand
  nameWithType: Utils.RunCommand
  fullName: DocFxForUnity.Utils.RunCommand
- uid: DocFxForUnity.Utils.httpClient
  commentId: F:DocFxForUnity.Utils.httpClient
  isExternal: true
- uid: DocFxForUnity.Utils.TestUriExists*
  commentId: Overload:DocFxForUnity.Utils.TestUriExists
  name: TestUriExists
  nameWithType: Utils.TestUriExists
  fullName: DocFxForUnity.Utils.TestUriExists
- uid: Global.Task{System.Boolean}
  commentId: '!:Global.Task{System.Boolean}'
  definition: Global.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Global.Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Task`1
  commentId: '!:Global.Task`1'
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Global.Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
